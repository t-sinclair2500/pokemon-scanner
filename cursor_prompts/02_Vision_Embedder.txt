You are my senior Python pair programmer.
Use THINK → PLAN → APPLY → TEST and log to TASKLOG.md after completion.

GOAL
Implement a deterministic image embedding pipeline using OpenCLIP (ViT-B/32).

THINK
We need a reusable `Embedder` to produce normalized (1,D) float32 vectors from BGR frames. Prefer MPS on Apple Silicon, else CPU.

PLAN
- Add `src/vision/embedder.py` with `Embedder` class, using open_clip_torch and torch.
- Normalize vectors (L2) and return numpy float32.

APPLY
Update deps (if needed):
- `torch`, `torchvision`, `open_clip_torch`

Create `src/vision/embedder.py`:
```
from typing import Tuple
import numpy as np
import torch
import cv2
import open_clip
from src.core.constants import EMBED_MODEL, EMBED_PRETRAINED

class Embedder:
    def __init__(self, device: str | None = None):
        if device is None:
            device = "mps" if torch.backends.mps.is_available() else ("cuda" if torch.cuda.is_available() else "cpu")
        self.device = device
        self.model, _, self.preprocess = open_clip.create_model_and_transforms(EMBED_MODEL, pretrained=EMBED_PRETRAINED, device=self.device)
        self.tokenizer = open_clip.get_tokenizer(EMBED_MODEL)

    def embed_image(self, bgr: np.ndarray) -> np.ndarray:
        rgb = cv2.cvtColor(bgr, cv2.COLOR_BGR2RGB)
        pil = open_clip.transforms.ToPILImage()(rgb)
        with torch.no_grad():
            img = self.preprocess(pil).unsqueeze(0).to(self.device)
            feats = self.model.encode_image(img)
            feats = feats / feats.norm(dim=-1, keepdim=True)
        return feats.cpu().numpy().astype("float32")  # (1, D)
```

TEST
- `python -c "import numpy as np, cv2; import numpy as np; from src.vision.embedder import Embedder; import numpy as np; import sys; import PIL"`
- Load any image and call `Embedder().embed_image(img)`; assert shape `(1, 512)` for ViT-B/32.
- Log success to TASKLOG.md.
